buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

allprojects{
    defaultTasks 'build'
}

if(System.getenv("JAVA8_HOME")==null)
    throw new GradleException("Please set environment variable JAVA8_HOME");

if(!System.properties["java.version"].startsWith("1.6"))
	throw new GradleException("Please run gralde with jdk 1.6.X");

new ByteArrayOutputStream().withStream { os ->
    if(file(".svn").exists()){
        exec {
            executable = 'svnversion'
            standardOutput = os
        }
        project.ext.svnversion = os.toString().trim().replace(':', '_')
    }else
        project.ext.svnversion = 'unknown'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'license'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    archivesBaseName = 'jlibs-'+project.name
    group = "com.googlecode.jlibs";
    version = '1.1-SNAPSHOT'

    license {
        header rootProject.file('src/etc/header.txt')
        strictCheck true
        skipExistingHeaders true
        exclude 'META-INF/services/**'
        exclude '**/*.xml'
    }

    compileJava {
        options.compilerArgs << "-s"
        def generatedSources = project.buildDir.absolutePath+"/generated-sources/annotations";
        new File(generatedSources).mkdirs()
        options.compilerArgs << generatedSources
    }

    compileTestJava {
        options.compilerArgs << "-s"
        def generatedSources = project.buildDir.absolutePath+"/generated-sources/test-annotations";
        new File(generatedSources).mkdirs()
        options.compilerArgs << generatedSources
    }

    repositories {
        mavenCentral()
        maven { url "http://svn.apache.org/repos/asf/tuscany/maven/" }
        maven { url "http://bits.netbeans.org/nexus/content/groups/netbeans" }
        //maven { url "https://github.com/santhosh-tekuri/maven-repository/raw/master/" }
    }

    jar {
        manifest {
            attributes 'Implementation-Version': svnversion
        }
    }

    javadoc {
        configure(options) {
            links "http://download.oracle.com/javase/6/docs/api/"
            links "http://download.oracle.com/javaee/6/api/"

            bottom '<link href="{@docRoot}/resources/prettify.css" type="text/css" rel="stylesheet" />'+
                    '<script type="text/javascript" src="{@docRoot}/resources/prettify.js"></script>'+
                    '<script language="javascript">'+
                        'window.onload = function(){ prettyPrint(); }'+
                    '</script>'
        }
        copy{
            from '../src/main/javadoc/resources'
            into 'build/docs/javadoc/resources'
            include '**/*.*'
        }
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }
    
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { gradle.taskGraph.hasTask(release) }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: new File(projectDir, "../build/repo").toURL().toString())
                pom.project {
                    url "http://jlibs.googlecode.com"
                    scm {
                        url "scm:svn:https://jlibs.googlecode.com/svn/trunk/jlibs"
                        connection "scm:svn:https://jlibs.googlecode.com/svn/trunk/jlibs"
                    }
                    licenses {
                        license {
                            name "GNU Lesser General Public License"
                            url "http://www.gnu.org/licenses/lgpl.html"
                        }
                    }
                    developers {
                        developer {
                            id "santhosh"
                            name "Santhosh Kumar Tekuri"
                            email "santhosh.tekuri@gmail.com"
                        }
                    }                    
                }
            }
        }
    }

    build << {
        def distribution = "$projectDir/../build/dist";

        // copy main jar
        copy{
            from "$project.buildDir/libs/$archivesBaseName-${version}.jar"
            into "$distribution/lib"
            rename { String fileName ->
                fileName.replace("-$version", '')
            }
        }

        // copy source jar
        copy{
            from "$project.buildDir/libs/$archivesBaseName-${version}-sources.jar"
            into "$distribution/src"
            rename { String fileName ->
                fileName.replace("-$version-sources", '')
            }
        }

        // copy external jars
        copy{
            from configurations.runtime
            into "$distribution/lib/external"
            exclude '**/jlibs-*.jar'
            rename { String fileName ->
                int minus = fileName.lastIndexOf('-');
                int dot = fileName.lastIndexOf('.')
                fileName.substring(0, minus)+fileName.substring(dot)
            }
        }

        copy{
            from "$projectDir"
            into "$distribution"
            include 'bin/**/*'
            include 'resources/**/*'
        }
    }
}

task build(dependsOn: subprojects*.build) << {
    fileTree(dir: 'build/dist/bin', include: '**/*.sh').each { File file ->
        file.setExecutable(true)
    }
    copy{
        from "$projectDir/dependencies.xml"
        into "build/dist/lib/external"
        rename { String fileName -> 'build.xml' }
    }
    copy{
        from projectDir
        into 'build/dist'
        include 'readme.txt'
        include 'keystore.ks'
    }
}

task docs(type: Javadoc) {
    executable = "${System.env.JAVA8_HOME}/bin/javadoc"
    source subprojects.collect {project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
    destinationDir = new File(projectDir, 'build/apidocs')
    options.addStringOption('Xdoclint:none', '-quiet')

    configure(options) {
        exclude 'jlibs/nio/Tracer.java'
        linkSource true
        links "http://download.oracle.com/javase/6/docs/api/"
        links "http://download.oracle.com/javaee/6/api/"

        groups.put("JLibs-Core", Arrays.asList("jlibs.core*"))
        groups.put("JLibs-XMLDog", Arrays.asList("jlibs.xml.sax.dog*"))
        groups.put("JLibs-XML", Arrays.asList("jlibs.xml*"))
        groups.put("JLibs-Swing", Arrays.asList("jlibs.swing*"))

        bottom '<link href="{@docRoot}/resources/prettify.css" type="text/css" rel="stylesheet" />'+
                '<script type="text/javascript" src="{@docRoot}/resources/prettify.js"></script>'+
                '<script language="javascript">'+
                    'window.onload = function(){ prettyPrint(); }'+
                '</script>'
    }

    copy{
        from 'src/main/javadoc/resources'
        into 'build/apidocs/resources'
        include '**/*.*'
    }
}

task release(type: Zip, dependsOn: [build, subprojects*.uploadArchives, docs]) {
    archiveName "build/jlibs-r${svnversion}.zip"
    from 'build/dist'
    into "jlibs-r${svnversion}"
    exclude "lib/external/*.jar"
}

task clean(type:Delete, dependsOn: subprojects*.clean) {
	delete project.buildDir
}
